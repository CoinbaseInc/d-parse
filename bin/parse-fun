#!/usr/bin/env ruby

require 'd-parse'
require 'd-parse/dsl'
require 'pp'

digit = chars(*('0'..'9')).named('digit')
identifier_char = chars(*('a'..'z'))
identifier = (identifier_char >> identifier_char.repeat).capture.named('identifier')
lit = (digit >> digit.repeat).capture.map { |d| d.to_i(10) }
funcall = nil
expression = (lazy { funcall } | lit).named('expression')
lparen = char('(')
rparen = char(')')
comma = char(',')
arglist_tail = (comma >> whitespace >> expression).map { |d| d[2] }.repeat
arglist = (expression >> arglist_tail).map { |d| [d[0]] + d[1] }
funcall = (identifier >> lparen >> arglist >> rparen).map { |d| [d[0]] + d[2] }
eof = char("\n").optional >> end_of_input
program = (expression.intersperse(char("\n")).select_even >> eof).first

def eval_expr(expr)
  case expr
  when Array
    case expr[0]
    when 'add'
      eval_expr(expr[1]) + eval_expr(expr[2])
    when 'mul'
      eval_expr(expr[1]) * eval_expr(expr[2])
    else
      raise '???'
    end
  when Integer
    expr
  else
    raise '???'
  end
end

exprs = parse_from_argv(program)
pp exprs
exprs.each { |e| p eval_expr(e) }
