#!/usr/bin/env ruby

require 'd-parse'

Position = DParse::Position
Nothing  = DParse::Nothing
NOTHING  = DParse::NOTHING
Success  = DParse::Success
Failure  = DParse::Failure
Parser   = DParse::Parser

AnyParser         = DParse::Parsers::Any
CapturingParser   = DParse::Parsers::Capturing
CharParser        = DParse::Parsers::Char
EndOfInputParser  = DParse::Parsers::EndOfInput
IntersperseParser = DParse::Parsers::Intersperse
LazyParser        = DParse::Parsers::Lazy
NotCharParser     = DParse::Parsers::NotChar
NotCharsParser    = DParse::Parsers::NotChars
OrParser          = DParse::Parsers::Or
RepeatParser      = DParse::Parsers::Repeat
SequenceParser    = DParse::Parsers::Sequence
StringParser      = DParse::Parsers::String
WhitespaceParser  = DParse::Parsers::Whitespace

#############################################################################

digit_parser =
  CapturingParser.new(
    OrParser.new(
      CharParser.new('0'),
      CharParser.new('1'),
      CharParser.new('2'),
      CharParser.new('3'),
      CharParser.new('4'),
      CharParser.new('5'),
      CharParser.new('6'),
      CharParser.new('7'),
      CharParser.new('8'),
    ),
  )

letter_parser =
  CapturingParser.new(
    OrParser.new(
      *(('a'..'z').map { |c| CharParser.new(c) }),
    ),
  )

init_parser =
  CapturingParser.new(
    OrParser.new(
      CharParser.new('d'), # digit
      CharParser.new('l'), # letter
    ),
  )

pair_parser =
  init_parser.bind do |data|
    new_parser =
      case data
      when 'd'
        digit_parser
      when 'l'
        letter_parser
      else
        raise '???'
      end

    new_parser.map { |d| [data, d] }
  end

parser = RepeatParser.new(pair_parser)

main(parser)
